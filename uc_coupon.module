<?php

/**
 * @file
 * Provides discount coupons for Ubercart.
 *
 * Original code by Blake Lucchesi (www.boldsource.com)
 * Maintained by David Long (dave@longwaveconsulting.com)
 *
 * Send any suggestions and feedback to the above address.
 */

/**
 * Implements hook_menu().
 */
function uc_coupon_menu() {
  $items = array();

  $items['admin/store/coupons'] = array(
    'title' => 'Coupons',
    'description' => 'Manage store discount coupons.',
    'page callback' => 'uc_coupon_display',
    'page arguments' => array('active'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['admin/store/coupons/list'] = array(
    'title' => 'Active coupons',
    'description' => 'View active coupons.',
    'page callback' => 'uc_coupon_display',
    'page arguments' => array('active'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 0,
  );
  $items['admin/store/coupons/inactive'] = array(
    'title' => 'Inactive coupons',
    'description' => 'View inactive coupons.',
    'page callback' => 'uc_coupon_display',
    'page arguments' => array('inactive'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 1,
  );
  $items['admin/store/coupons/add'] = array(
    'title' => 'Add new coupon',
    'description' => 'Add a new coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_add_form'),
    'access arguments' => array('manage store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 2,
  );
  $items['admin/store/coupons/%uc_coupon'] = array(
    'title callback' => 'uc_coupon_title',
    'title arguments' => array(3),
    'description' => 'View coupon details.',
    'page callback' => 'uc_coupon_view',
    'page arguments' => array(3),
    'access arguments' => array('view store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 3,
  );
  $items['admin/store/coupons/%uc_coupon/view'] = array(
    'title' => 'View',
    'description' => 'View coupon details.',
    'access arguments' => array('view store coupons'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 0,
  );
  $items['admin/store/coupons/%uc_coupon/print'] = array(
    'title' => 'Print',
    'description' => 'Print coupon.',
    'page callback' => 'uc_coupon_print',
    'page arguments' => array(3, 5, 'print'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 1,
  );
  $items['admin/store/coupons/%uc_coupon/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit an existing coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_add_form', 3),
    'access arguments' => array('manage store coupons'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 2,
  );
  $items['admin/store/coupons/%uc_coupon/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_delete_confirm', 3),
    'access arguments' => array('manage store coupons'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 3,
  );
  $items['admin/store/coupons/%uc_coupon/codes'] = array(
    'title' => 'Download bulk coupon codes',
    'description' => 'Download the list of bulk coupon codes as a CSV file.',
    'page callback' => 'uc_coupon_codes_csv',
    'page arguments' => array(3),
    'access arguments' => array('view store coupons'),
    'file' => 'uc_coupon.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/store/coupons/ahah'] = array(
    'page callback' => 'uc_coupon_ahah',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['admin/store/coupons/autocomplete/node'] = array(
    'title' => 'Node autocomplete',
    'page callback' => 'uc_coupon_autocomplete_node',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['admin/store/coupons/autocomplete/term'] = array(
    'title' => 'Term autocomplete',
    'page callback' => 'uc_coupon_autocomplete_term',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['admin/store/coupons/autocomplete/user'] = array(
    'title' => 'User autocomplete',
    'page callback' => 'uc_coupon_autocomplete_user',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['admin/store/coupons/autocomplete/role'] = array(
    'title' => 'Role autocomplete',
    'page callback' => 'uc_coupon_autocomplete_role',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );

  $items['admin/store/settings/coupon'] = array(
    'title' => 'Coupon module settings',
    'description' => 'Configure the discount coupon module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_settings_form'),
    'access arguments' => array('administer store'),
    'file' => 'uc_coupon.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/store/reports/coupon'] = array(
    'title' => 'Coupon usage reports',
    'description' => 'View coupon usage reports.',
    'page callback' => 'uc_coupon_reports',
    'access arguments' => array('view reports'),
    'file' => 'uc_coupon.reports.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Title call back for coupon print preview.
 */
function uc_coupon_title($coupon) {
  return $coupon->name;
}

/**
 * Implements hook_permission().
 */
function uc_coupon_permission() {
  $perms = array(
    'view store coupons' => array(
      'title' => t('view store coupons'),
      'description' => t('Display information about discount coupons.'),
    ),
    'manage store coupons' => array(
      'title' => t('manage store coupons'),
      'description' => t('Create, edit and delete discoutn coupons.'),
    ),
  );
  if (!module_exists('uc_reports')) {
    $perms['view reports'] = array(
      'title' => t('view reports'),
      'description' => t('Display coupon usage reports.')
    );
  }
  return $perms;
}

/**
 * Implements hook_init().
 */
function uc_coupon_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_coupon_pane_description';

  // Auto apply coupon from query string, if configured.
  if ($param = variable_get('uc_coupon_querystring', '')) {
    if (isset($_GET[$param]) && $_GET[$param]) {
      $_SESSION['uc_coupons'][$_GET[$param]] = $_GET[$param];
    }
  }
}

/**
 * Implements hook_theme().
 */
function uc_coupon_theme() {
  return array(
    'uc_checkout_pane_coupon' => array(
      'render element' => 'form',
    ),
    'uc_coupon_actions' => array(
      'variables' => array('coupon' => NULL),
      'file' => 'uc_coupon.admin.inc',
    ),
    'uc_coupon_code' => array(
      'variables' => array('coupon' => NULL),
      'file' => 'uc_coupon.admin.inc',
    ),
    'uc_coupon_discount' => array(
      'variables' => array('coupon' => NULL, 'currency' => TRUE),
    ),
    'uc_coupon_certificate' => array(
      'variables' => array('coupon' => NULL, 'code' => NULL),
      'template' => 'uc_coupon-certificate',
      'path' => drupal_get_path('module', 'uc_coupon') . '/theme',
    ),
    'uc_coupon_page' => array(
      'variables' => array('content' => NULL),
      'template' => 'uc_coupon-page',
      'path' => drupal_get_path('module', 'uc_coupon') . '/theme',
    ),
  );
}

/**
 * Default theme implementation for the checkout pane.
 */
function theme_uc_checkout_pane_coupon($variables) {
  $form = $variables['form'];
  return drupal_render_children($form);
}

/**
 * Save a coupon object.
 *
 * If the 'cid' field is set, then this will update an existing coupon.
 * Otherwise, a new bulk seed will be generated, the coupon will be
 * inserted into the database, and $coupon->cid will be set.
 *
 * @param $coupon
 *   The coupon to save.
 *
 * @param $edit
 *   An optional array of extra data that other modules may need to save.
 */
function uc_coupon_save(&$coupon, $edit = array()) {
  // Allow other modules to alter the coupon before saving.
  foreach (module_implements('uc_coupon_presave') as $module) {
    $callback = $module . '_uc_coupon_presave';
    $callback($coupon, $edit);
  }

  if (isset($coupon->cid)) {
    drupal_write_record('uc_coupons', $coupon, 'cid');
  }
  else {
    $coupon->created = REQUEST_TIME;
    $coupon->bulk_seed = md5(uniqid());
    drupal_write_record('uc_coupons', $coupon);
  }

  // Notify other modules that a coupon has been saved.
  module_invoke_all('uc_coupon_save', $coupon);
}

/**
 * Load a coupon object.
 *
 * @param $cid
 *   Unique coupon ID.
 *
 * @return $coupon
 *   A coupon object.
 */
function uc_coupon_load($cid) {
  $coupon = db_query("SELECT * FROM {uc_coupons} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
  $coupon->data = isset($coupon->data) ? unserialize($coupon->data) : array();

  // Convert old coupons that could not specify "per order" when restricted.
  if (!isset($coupon->data['apply_to'])) {
    if (isset($coupon->data['max_applicable_products_value']) && isset($coupon->data['max_applicable_products']) && $coupon->data['max_applicable_products']) {
      // Coupon was restricted to X cheapest or most expensive products.
      $coupon->data['apply_to'] = $coupon->data['max_applicable_products_value'];
      $coupon->data['apply_count'] = $coupon->data['max_applicable_products'];
    }
    elseif (isset($coupon->data['products']) || isset($coupon->data['skus']) || isset($coupon->data['terms']) || isset($coupon->data['product_types'])) {
      // Coupon has product restrictions, so was applied to each matching product.
      $coupon->data['apply_to'] = 'products';
    }
    else {
      // Coupon had no product restrictions, so was applied once to the subtotal.
      $coupon->data['apply_to'] = 'subtotal';
    }
  }
  unset($coupon->data['max_applicable_products']);
  unset($coupon->data['max_applicable_products_value']);

  // Allow other modules to alter the coupon data.
  drupal_alter('uc_coupon', $coupon);

  return $coupon;
}

/**
 * Count usage of a coupon.
 *
 * @param $cid
 *   The coupon id to count.
 * @param $uid
 *   (optional) The user id to count. Defaults to the current user.
 *
 * @return
 *   An associative array containing:
 *   - codes: An associative array of code => usage count.
 *   - user: The usage count by the specified (or current) user.
 */
function uc_coupon_count_usage($cid, $uid = NULL) {
  global $user;

  $usage = array('codes' => array());
  $result = db_query("SELECT uco.code, COUNT(*) uses FROM {uc_coupons_orders} AS uco
    LEFT JOIN {uc_orders} AS uo ON uco.oid = uo.order_id
    LEFT JOIN {uc_order_statuses} AS uos ON uo.order_status = uos.order_status_id
    WHERE uos.weight > 0 AND uco.cid = :cid GROUP BY uco.code", array( ':cid' => $cid));
  foreach ($result as $row) {
    $usage['codes'][$row->code] = $row->uses;
  }

  if (is_null($uid)) {
    $uid = $user->uid;
  }
  $usage['user'] = db_query("SELECT COUNT(*) FROM {uc_coupons_orders} AS uco
    LEFT JOIN {uc_orders} AS uo ON uco.oid = uo.order_id
    LEFT JOIN {uc_order_statuses} AS uos ON uo.order_status = uos.order_status_id
    WHERE uos.weight > 0 AND uco.cid = :cid AND uo.uid = :uid", array( ':cid' => $cid, ':uid' => $uid))->fetchField();

  // Allow other modules to implement usage counts.
  drupal_alter('uc_coupon_usage', $usage, $cid, $uid);

  return $usage;
}

/**
 * Theme for a coupon discount.
 * @param $variables
 * 	'coupon' => The coupon whose discount is to be themed.
 * 	'currency' => TRUE to include currency symbols.
 */
function theme_uc_coupon_discount($variables) {
  $coupon = $variables['coupon'];
  $currency = isset($variables['currency']) ? $variables['currency'] : TRUE;
  return _uc_coupon_format_discount($coupon, $currency);
}

/**
 * Format a coupon depending on the type, optionally including currency symbols.
 */
function _uc_coupon_format_discount($coupon, $currency=TRUE) {
  switch ($coupon->type) {
    case 'price':
      return $currency ? uc_currency_format($coupon->value) : $coupon->value;

    case 'percentage':
      return (float) $coupon->value . '%';

    case 'set_price':
      return '=' . ($currency ? uc_currency_format($coupon->value) : $coupon->value);
  }
}

/**
 * Generate a single bulk coupon code.
 */
function uc_coupon_get_bulk_code($coupon, $id) {
  // If this coupon has been validated, then $coupon->code is already a bulk code.
  if (isset($coupon->valid)) {
    $prefix = drupal_substr($coupon->code, 0, strlen($coupon->code) - $coupon->data['bulk_length']);
  }
  else {
    $prefix = $coupon->code;
  }
  $id = str_pad(dechex($id), strlen(dechex($coupon->data['bulk_number'])), '0', STR_PAD_LEFT);
  $length = strlen($prefix) + $coupon->data['bulk_length'];
  return strtoupper(substr($prefix . $id . md5($coupon->bulk_seed . $id), 0, $length));
}

/**
 * Load a coupon (single or bulk) from the supplied code.
 * @param $code
 * 		The coupon code to search for.
 * @param $reset
 *    If TRUE the cache of codes for this request will be purged.  Any function which modifies
 *    a coupon should purge the cache.
 */
function uc_coupon_find($code, $reset=FALSE) {
  // This is expensive and can be called many times during coupon processing, so we 
  // cache 
  static $cached = array();
  if ($reset) {
    $cached = array();
  }
  
  if (!$code) {
    return FALSE;
  }
  elseif (array_key_exists($code, $cached)) {
    return $cached[$code];
  }
  
  // Look for matching single coupon first.
  $coupon = db_query("SELECT cid FROM {uc_coupons} 
  	WHERE code = :code AND status = 1 AND bulk = 0 AND valid_from < :now AND (valid_until = 0 OR valid_until > :now)", 
    array(':code' => $code, ':now' => REQUEST_TIME))
    ->fetchObject();
  if ($coupon) {
    $cached[$code] = uc_coupon_load($coupon->cid);
    return $cached[$code];
  }

  // Look through bulk coupons.
  $result = db_query("SELECT cid, code, data, bulk_seed FROM {uc_coupons} 
  	WHERE status = 1 AND bulk = 1 AND valid_from < :now AND (valid_until = 0 OR valid_until > :now)", 
    array(':now' => REQUEST_TIME));
  foreach ($result as $coupon) {
    // Check coupon prefix.
    $prefix_length = strlen($coupon->code);
    if (substr($code, 0, $prefix_length) != $coupon->code) {
      continue;
    }

    if ($coupon->data) {
      $coupon->data = unserialize($coupon->data);
    }

    // Check coupon sequence ID.
    $id = substr($code, $prefix_length, strlen(dechex($coupon->data['bulk_number'])));
    if (!preg_match("/^[0-9A-F]+$/", $id)) {
      continue;
    }
    $id = hexdec($id);
    if ($id < 0 || $id > $coupon->data['bulk_number']) {
      continue;
    }

    // Check complete coupon code.
    if ($code == uc_coupon_get_bulk_code($coupon, $id)) {
      $cached[$code] = uc_coupon_load($coupon->cid);
      return $cached[$code];
    }
  }

  $cached[$code] = FALSE;
  return $cached[$code];
}

/**
 * Validate a coupon, and optionally calculate the order discount.
 *
 * @param $code
 *   The coupon code entered at the checkout screen.
 * @param $order
 *   The order that the coupon is being applied to.
 *   If NULL, the current cart contents will be used.
 *   If FALSE, product and order validation will be bypassed.
 * @param $account
 *   The user who is attempting to use the coupon.
 *   If NULL, the current user will be assumed.
 *   If FALSE, user validation will be bypassed.
 *
 * @return
 *   A coupon object with extended information about the validation:
 *   - $coupon->valid: TRUE if the code was valid, FALSE otherwise.
 *   - $coupon->code: The specific code to be applied (even for bulk coupons).
 *   - $coupon->title: The line item title for the discount.
 *   - $coupon->amount: If $order !== FALSE, the discount that should be applied.
 *   - $coupon->message: If $coupon->valid == FALSE, the rejection reason.
 *   
 *   Note that the $order object (if specified) will also be modified by the addition to
 *   or creation of a 'coupons' array, containing the discounts indexed by the validated
 *   coupon code. For each coupon, the discounts are saved as an array indexed by the
 *   nid of the discounted item.  Each discount is an object with two fields.  I.e.
 *   		$order->data['coupons'][$validated_code][$nid]
 *   		-> 'discount' = The full value of the discount on that item.
 *   		-> 'pretax_discount' => The actual pre-tax discount. For fixed discounts to products with
 *   			 taxes included, we apply the face value of the coupon tax-inclusively also; that is, 
 *   			 the actual discount is calculated so that the face value is correct after taxes.
 */
function uc_coupon_validate($code, $order = NULL, $account = NULL) {
  global $user;
  if (is_null($order)) {
    $order = new stdClass();
    $order->products = uc_cart_get_contents();
    $order->data['coupons'] = $_SESSION['uc_coupons'];
  }

  if (is_null($account)) {
    $account = $user;
  }

  // Look for an active coupon matching the code.
  $code = trim(strtoupper($code));
  $coupon = uc_coupon_find($code);
  if (!$coupon) {
    $coupon = new stdClass();
    $coupon->valid = FALSE;
    $coupon->message = t('This coupon code is invalid or has expired.');
    return $coupon;
  }

  // Assume the coupon is valid, unless a validation hook fails.
  $coupon->code = $code;
  $coupon->valid = TRUE;
  $coupon->usage = uc_coupon_count_usage($coupon->cid, $account ? $account->uid : NULL);

  $format = !empty($coupon->data['line_item_format']) ? $coupon->data['line_item_format'] : 
      variable_get('uc_coupon_line_item_format', t('Coupon !code', array('!code' => '[uc_coupon:code]')));
  $coupon->title = token_replace(check_plain($format), array('uc_coupon' => $coupon));

  // Calculate the discount.
  if ($order) {
    $order->data['coupons'][$code] = uc_coupon_calculate_discounts($coupon, $order, TRUE);
    $coupon->amount = 0;
    foreach ($order->data['coupons'][$code] as $item) {
      $coupon->amount += $item->discount;
    }
    $coupon->amount = round($coupon->amount, variable_get('uc_currency_prec', 2));
  }

  // Invoke validation hook.
  foreach (module_implements('uc_coupon_validate') as $module) {
    $callback = $module . '_uc_coupon_validate';
    $result = $callback($coupon, $order, $account);

    if ($result === TRUE) {
      // This module wishes the coupon to be accepted.
      $coupon->valid = TRUE;
    }
    elseif (!is_null($result)) {
      // This module wishes the coupon to be rejected.
      $coupon->valid = FALSE;
      $coupon->message = $result;
    }
  }

  return $coupon;
}


/**
 * Implements hook_uc_coupon_validate().
 *
 * @param $coupon
 *   The coupon object to validate, with special fields set as follows:
 *   - $coupon->code: The specific code to be applied (even for bulk coupons).
 *   - $coupon->amount: If $order !== FALSE, the discount that should be applied.
 *   - $coupon->usage: Coupon usage data from uc_coupon_count_usage().
 * @param $order
 *   The order against which this coupon is to be applied, or FALSE to bypass order validation.
 * @param $account
 *   The account of the user trying to use the coupon, or FALSE to bypass user validation.
 *
 * @return
 *   TRUE if the coupon should be accepted.
 *   NULL to allow other modules to determine validation.
 *   Otherwise, a string describing the reason for failure.
 */
function uc_coupon_uc_coupon_validate(&$coupon, $order, $account) {
  // Check for allowed combinations.
  if (!empty($order->data['coupons'])) {
    $match = !empty($coupon->data['combinations']) && count(array_intersect(array_keys($order->data['coupons']), $coupon->data['combinations']));
    dpm("Match=" . ($match?1:0) . " neg=" . (isset($coupon->data['negate_combinations'])?1:0));
    if (!(isset($coupon->data['negate_combinations']) xor $match)) { 
      return t('This coupon combination is not allowed.');
    } 
  }
  
  // Check for applicable products.
  if ($order && $coupon->amount == 0 && $coupon->value != 0) {
    return t('You do not have applicable products in your cart.');
  }

  // Check maximum usage per code.
  if ($coupon->max_uses > 0 && !empty($coupon->usage['codes'][$coupon->code]) && $coupon->usage['codes'][$coupon->code] >= $coupon->max_uses) {
    return t('This coupon has reached the maximum redemption limit.');
  }

  // Check maximum usage per user.
  if ($account && isset($coupon->data['max_uses_per_user']) && $coupon->usage['user'] >= $coupon->data['max_uses_per_user']) {
    return t('This coupon has reached the maximum redemption limit.');
  }

  // Check minimum order total.
  if ($order && $coupon->minimum_order > 0) {
    $total = 0;

    foreach ($order->products as $item) {
      $total += $item->price * $item->qty;
    }

    if ($coupon->minimum_order > $total) {
      return t('You have not reached the minimum order total for this coupon.');
    }
  }

  // Check user ID.
  if ($account && isset($coupon->data['users'])) {
    if (in_array("$account->uid", $coupon->data['users'], TRUE) xor !isset($coupon->data['negate_users'])) {
      return t('Your user ID is not allowed to use this coupon.');
    }
  }

  // Check roles.
  if ($account && isset($coupon->data['roles'])) {
    $role_found = FALSE;
    foreach ($coupon->data['roles'] as $role) {
      if (in_array($role, $account->roles)) {
        $role_found = TRUE;
        break;
      }
    }
    if ($role_found xor !isset($coupon->data['negate_roles'])) {
      return t('You do not have the correct permission to use this coupon.');
    }
  }
}

/**
 * Find items that a coupon will apply to and calculate the discounts.
 * @param $coupon
 * 		A coupon object to apply, or a coupon code as a string.
 * @param $order
 * 		The order object to which the coupon should be applied.
 */
function uc_coupon_calculate_discounts($coupon, $order) {
  if (!is_object($coupon)) {
    // If argument is a code, load the corresponding coupon.
    $coupon = uc_coupon_find($coupon);
  }
  
  // Discover if any items match the restrictions, and which items the discount should be calculated against.
  $restricted = isset($coupon->data['products']) || isset($coupon->data['skus']) || isset($coupon->data['terms']) || isset($coupon->data['product_types']);
  $matched = 0;
  $total_qty = 0;
  $items = array();
  foreach ($order->products as $item) {
    if (isset($item->module) && $item->module == 'uc_coupon') {
      continue;
    }

    $node = node_load($item->nid);
    $qty = $item->qty;

    if (!$restricted) {
      // Coupons with no restrictions apply to all products.
      $include = TRUE;
    }
    else {
      // Other coupons only apply to matching products.
      $include = FALSE;
      $terms = isset($node->taxonomy) ? array_keys($node->taxonomy) : array();

      if (isset($coupon->data['products']) && (isset($coupon->data['negate_products']) xor in_array($item->nid, $coupon->data['products']))) {
        $include = TRUE;
      }
      elseif (isset($coupon->data['products']) && isset($coupon->data['negate_products']) && in_array($item->nid, $coupon->data['products'])) {
        // always exclude if in list of negated products
      }
      elseif (isset($coupon->data['terms']) && (isset($coupon->data['negate_terms']) xor count(array_intersect($terms, $coupon->data['terms'])))) {
        $include = TRUE;
      }
      elseif (isset($coupon->data['terms']) && isset($coupon->data['negate_terms']) && count(array_intersect($terms, $coupon->data['terms']))) {
        // always exclude if one of the terms is in the list of negated terms
      }
      elseif (isset($coupon->data['skus']) && _uc_coupon_match_sku($item->model, $coupon->data['skus'])) {
        $include = TRUE;
      }
      elseif (isset($coupon->data['product_types']) && in_array($node->type, $coupon->data['product_types'])) {
        $include = TRUE;
      }
    }

    // A matching product was found.
    if ($include) {
      $matched += $qty;
    }
    $total_qty += $qty;

    // Include this item. Coupons that apply to the order subtotal affect all products.
    if ($include || $coupon->data['apply_to'] == 'subtotal') {
      $items = array_pad($items, count($items) + $qty, $item);
    }
  }

  // If no matches were found, there are no discounts to calculate.
  if ($matched == 0) {
    return array();
  }

  // Make sure the minimum quantity restriction (if any) is met.
  if (isset($coupon->data['minimum_aty'])) {
    $check_qty = (isset($coupon->data['minimum_qty_restrict']) && $coupon->data['minimum_qty_restrict'] != FALSE) ? $matched : $total_qty;
    if ($check_qty < $coupon->data['minimum_aty']) {
      return array();
    }      
  }

  // Slice off applicable products if a limit was set.
  switch ($coupon->data['apply_to']) {
    case 'cheapest':
      usort($items, '_uc_coupon_sort_products');
      $items = array_slice($items, 0, $coupon->data['apply_count']);
      break;

    case 'expensive':
      usort($items, '_uc_coupon_sort_products');
      $items = array_slice($items, -$coupon->data['apply_count']);
      break;
  }

  // Build the discounts array and get the order total.
  $total = 0;
  $discounts = array();
  foreach ($items as $item) {
    if (!isset($discounts[$item->nid])) { // First entry for this product.
      // Calculate the pre-tax discount proportion for this item.
      // For fixed discounts to products with taxes included, we apply the face value of the coupon
      // tax-inclusively also; that is, the actual discount is reduced so that the face value is
      // realized after taxes. (This already happens automatically for percentage based coupons).
      $included_rate = 0;
      if ($coupon->type != 'percentage') {
        foreach (uc_taxes_rate_load() as $tax) {
          if ($tax->display_include
              && is_array($tax->taxed_line_items) && in_array('coupon', $tax->taxed_line_items)
              && in_array($node->type, $tax->taxed_product_types)
              && ($tax->shippable == 0 || $item->data['shippable'] == 1)) {
            $included_rate += $tax->rate;
          }
        }
      }
      
      // Adjust the price for any stacked coupons.
      $prior_discount = 0;
      if (!empty($order->coupons)) {
        foreach ($order->coupons as $stacked) {
          if (isset($stacked[$item->nid])) {
            $prior_discount += $stacked_coupons[$item->nid]->pretax_discount;
          }
        }
      }
      $total -= $prior_discount;
      
      $discounts[$item->nid] = (object) array(
        'qty' => 1,
        'price' => $item->price - $prior_discount,
        'pretax_discount' => 1 / (1 + $included_rate),
      );
    }
    else { // An entry for this product already exists.
      // Add this item to the total for the product.
      $discounts[$item->nid]->price += $item->price;
      $discounts[$item->nid]->qty++;
    }
    $total += $item->price;
  }

  // Calculate the discounts per product.
  foreach ($discounts as $discount) {
    switch ($coupon->type) {
      case 'price':
        if ($coupon->data['apply_to'] == 'subtotal') {
          // Apply single discount to the entire cart proportionally across the items.
          $discount->discount = $total == 0 ? 0 : min($coupon->value * $discount->price / $total, $discount->price);
        }
        else {
          // Apply discount to each product.
          $discount = min($coupon->value * $discount->qty, $discount->price);
        }
        $discount->pretax_discount *= $discount->discount;
        break;

      case 'percentage':
        $discount->discount = $discount->pretax_discount = $discount->price * $coupon->value / 100;
        break;

      case 'set_price':
        $discount->discount = max($discount->price - ($coupon->value * $discount->qty), 0);
        $discount->pretax_discount *= $discount->discount;
        break;
    }
    unset($discount->price);
    unset($discount->qty);
  }
  
  return $discounts;
}

function _uc_coupon_match_sku($model, $skus) {
  foreach ($skus as $match) {
    if (preg_match('/^' . str_replace('\*', '.*?', preg_quote($match, '/')) . '$/', $model)) {
      return TRUE;
    }
  }

  return FALSE;
}

function _uc_coupon_sort_products($a, $b) {
  if ($a->price == $b->price) {
    return 0;
  }
  return $a->price > $b->price ? 1 : -1;
}



/**
 * Implements hook_block_info().
 */
function uc_coupon_block_info() {
  $blocks = array();
  $blocks['coupon-discount'] = array(
    'info' => t('Coupon discount form'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function uc_coupon_block_view($delta) {
  if ($delta == 'coupon-discount') {
    $block = array(
      'subject' => t('Coupon discount'),
      'content' => drupal_get_form('uc_coupon_block_form'),
    );
    return $block;
  }
}


/**
 * Implements hook_uc_cart_pane().
 */
function uc_coupon_uc_cart_pane($items) {
  $panes[] = array(
    'id' => 'coupon',
    'body' => drupal_get_form('uc_coupon_cart_form'),
    'title' => t('Coupon discount'),
    'desc' => t('Allows shoppers to use a coupon during checkout for order discounts.'),
    'weight' => 1,
    'enabled' => TRUE,
  );
  return $panes;
}


/**
 * Coupon block form, also available as a cart pane.


function uc_coupon_block_form($form, $form_state, $size = 15) {
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#size' => $size,
  );
  $form['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
  );
  return $form;
}
*/

function uc_coupon_cart_form($form, $form_state) {
  $form['uc_coupon'] = array(
    '#type' => 'fieldset',
    '#title' => t('Coupon discounts')
  );
  $form['uc_coupon']['content'] = uc_coupon_form($_SESSION['uc_coupons']);
  return $form;
}

function uc_coupon_cart_form_submit($form, &$form_state) {
  uc_coupon_submit($form_state['values']['code'], $form_state['triggering_element']['#name'], NULL);
}

function uc_coupon_block_form($form, $form_state) {
  return uc_coupon_form($_SESSION['uc_coupons'], 15);
}
function uc_coupon_block_form_submit($form, &$form_state) {
  uc_coupon_submit($form_state['values']['code'], $form_state['triggering_element']['#name'], NULL);
}


function uc_coupon_table($codes, $ajax=FALSE) {
  $table = array(
    '#type' => 'tapir_table',
  );

  $table['#columns'] = array(
    'title' => array(
      'cell' => t('Current discounts'),
      'weight' => 0,
    ),
    'submit' => array(
      'cell' => t(''),
      'weight' => 1,
    ),
  );
  
  $i = 0;
  foreach ($codes as $code) {
    $coupon = uc_coupon_validate($code);
    if ($coupon->valid) {
      $table[$i] = array(
        //'#tree' => TRUE,
        'title' => array('#markup' => $coupon->title),
        'submit' => array(
      		'#type' => 'submit', 
      		'#value' => t('Remove'),
        	'#name' => 'uc-coupon-remove-' . $code,
        ),
      );
      if ($ajax) {
        // Add ajax functionality to this table.
        $table[$i]['submit'] += array(
        	//'#limit_validation_errors' => array('uc_coupons'),
        	'#ajax' => $ajax,
        );
      }
    }
    $i++;
  }
  
  return $table;
}

function uc_coupon_form($codes, $size = 25, $ajax = FALSE) {
  $element['code'] = array(
    '#type' => 'textfield',
    '#size' => $size,
    '#title' => t('Coupon Code'),
    '#description' => t('Enter a coupon code to apply to your order'),
    '#weight' => 0,
  );
  $element['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#name' => 'uc-coupon-apply',
    '#weight' => 1,
  );
  if ($ajax) {
    $element['apply'] += array(
    	//'#limit_validation_errors' => array('uc_coupons'),
    	'#ajax' => $ajax,
    );
  }
  
  if (!empty($codes)) {
    $element['coupons'] = tapir_get_table('uc_coupon_table', $codes, $ajax);
    $element['coupons']['#weight'] = 3;
  }
  
  return $element;
}

/**
 * Implements hook_uc_order().
 */
function uc_coupon_uc_order($op, &$order) {
  // Ensure any cart pane coupon is added to the order if the checkout page is skipped
  // (e.g. Paypal Express Checkout, Google Checkout)
  if ($op == 'save' && isset($_SESSION['uc_coupons'])) {
    $coupons = array();
    foreach ($_SESSION['uc_coupons'] as $code) {
      $coupon = uc_coupon_validate($code, $order);
      if ($coupon->valid) {
        $coupons[$coupon->code] = $coupon;
      }
    }
    _uc_coupon_apply_to_order($order->order_id, $coupons);
  }
  // Ensure that the order total is calculated properly when tax-inclusive coupon discounts are applied.
  elseif ($op == 'total' && isset($order->data['coupons']) && module_exists('uc_taxes')) {
    $adjustment = 0;
    foreach ($order->data['coupons'] as $items) {
      foreach ($items as $item) {
        $adjustment += $item->discount - $item->pretax_discount;
      }
    }
    return $adjustment;
  }
}

/**
 * Implements hook_uc_checkout_pane().
 *
 * Show a pane just above the order total that allows shoppers to enter a coupon
 * for a discount.
 */
function uc_coupon_uc_checkout_pane() {
  $panes[] = array(
    'id' => 'coupon',
    'callback' => 'uc_checkout_pane_coupon',
    'title' => t('Coupon discount'),
    'desc' => t('Allows shoppers to use a coupon during checkout for order discounts.'),
    'weight' => 5,
    'process' => TRUE,
  );
  return $panes;
}


function uc_coupon_checkout_update($form, $form_state) {
  $commands[] = ajax_command_replace('#coupon-pane', drupal_render($form['panes']['coupon']));
  if (isset($form['panes']['payment']['line_items'])) {
    $commands[] = ajax_command_replace('#line-items-div', drupal_render($form['panes']['payment']['line_items']));
  }  
  if (variable_get('uc_coupon_show_in_cart', TRUE) && isset($form['panes']['cart']['cart_review_table'])) {
    $commands[] = ajax_command_html('#cart-pane>div', drupal_render($form['panes']['cart']['cart_review_table']));
  }
  $commands[] = ajax_command_html('#coupon-messages', theme('status_messages'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Checkout Pane callback function.
 *
 * Used to display a form in the checkout process so that customers
 * can enter discount coupons.
 */
function uc_checkout_pane_coupon($op, &$order, $form=NULL, &$form_state=NULL) {
  switch ($op) {
    case 'view':
      drupal_add_css('#coupon-messages { clear: both; }', array('type' => 'inline', 'group' => CSS_DEFAULT));
      $ajax = array(
        'callback' => 'uc_coupon_checkout_update',
      );
      $description = variable_get('uc_coupon_pane_description', t('Enter a coupon code for this order.'));
      $contents = uc_coupon_form($_SESSION['uc_coupons'], 25, $ajax);
      $contents['message'] = array(
        '#markup' => '<div id="coupon-messages"></div>',
        '#weight' => 2,
      );
      return array(
        'description' => $description,
        'contents' => $contents,
        'theme' => 'uc_checkout_pane_coupon',
      );

    case 'process':
      //dpm($form);
      $trigger = $form_state['triggering_element']['#name'];
      if ($form_state['submitted'] || substr($trigger,9) == 'uc-coupon') {
        $form_state['rebuild'] = TRUE;
        return uc_coupon_submit($form_state['values']['panes']['coupon']['code'], $trigger, $order);
      }
      else {
        return TRUE;
      }

    case 'settings':
      $form['uc_coupon_collapse_pane'] = array(
        '#type' => 'checkbox',
        '#title' => t('Collapse checkout pane by default.'),
        '#default_value' => variable_get('uc_coupon_collapse_pane', FALSE),
      );
      $form['uc_coupon_pane_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Checkout pane message'),
        '#default_value' => variable_get('uc_coupon_pane_description', t('Enter a coupon code for this order.')),
      );
      return $form;
  }
}

/**
 * Submit handler for the uc_coupon form.
 * 
 * @param $code 
 * 		The code to submit.
 * @param $trigger
 * 		The name of the triggering element.
 * @param $order
 * 		The $order object to which the coupon applies.  Will only be present if the code is
 *    submitted from the checkout page.  If absent, the coupon will be validated against
 *    the current cart contents.
 */
function uc_coupon_submit($code, $trigger, $order = NULL) {
  // If this was a the result of a 'remove' submission. 
  if (substr($trigger, 0, 17) == 'uc-coupon-remove-') {
    $code = substr($trigger, 17);
    unset($_SESSION['uc_coupons'][$code]);
    unset($order->data['coupons'][$code]);
    return FALSE; // Prevent redirection.
  }
  // Otherwise a code is being submitted
  else {
    $code = strtoupper(trim($code));
    // Issue an error if no code was specified.
    if (empty($code)) {
      if ($trigger == 'uc-coupon-apply') {
        drupal_set_message(t('You must enter a valid coupon code.'), 'error');
      }
      return FALSE;
    }
    // Otherwise, check the coupon code that was entered.
    else {
      $coupon = uc_coupon_validate($code, $order);
      if (!$coupon->valid) {
        drupal_set_message($coupon->message, 'error');
        unset($_SESSION['uc_coupons'][$code]);
        unset($order->data['coupons'][$code]);
        //if (isset($order)) {
        //  _uc_coupon_apply_to_order($order->order_id, $coupon, FALSE);
        //}
        return FALSE;
      }
      else {
        // If this was an "Apply to order" request, issue a success message.
        if ($trigger == 'uc-coupon-apply') {
          if (isset($coupon->message)) {
            drupal_set_message($coupon->message);
          }
          elseif (isset($coupon->data['apply_message'])) {
            drupal_set_message(token_replace(check_plain($coupon->data['apply_message']), array('uc_coupon' => $coupon)));
          }
          else {  
            $amount = theme('uc_price', array('price' => $coupon->amount));
            if (isset($order) || variable_get('uc_coupon_show_in_cart', TRUE)) {
              drupal_set_message(t('A discount of !amount has been applied to your order.', array('!amount' => $amount)));
            }
            else {
              drupal_set_message(t('A discount of !amount will be applied at checkout.', array('!amount' => $amount)));
            }
          }
        }
        // Apply the coupon.
        $_SESSION['uc_coupons'][$code] = $code;
        //if (isset($order)) {
        //  _uc_coupon_apply_to_order($order->order_id, $coupon);
        //}
        rules_invoke_event('uc_coupon_is_applied', $coupon);
        return $trigger != 'uc-coupon-apply'; // Prevent redirection if js disabled and 'Apply to order' button was clicked.
      }
    }
  }
}


/**
 * Apply a set of coupons to an order.  
 * 
 * Line items and entries in the uc_coupons_orders table will be added for each coupon.  Any line items
 * or entries which are not in the list of coupons will be removed.
 * 
 * @param $order_id
 * 		The order_id of the order to which the coupons should be applied.
 * @param $coupons
 *    An array of validated coupon objects.
 */
function _uc_coupon_apply_to_order($order_id, $coupons) {
  $items = db_query("SELECT line_item_id, data FROM {uc_order_line_items} WHERE order_id = :order_id AND type = :type", 
      array(':order_id' => $order_id, ':type' => 'coupon'))->fetchAllKeyed();
  $applied = array();
  foreach ($items as $lid => $data) {
    if (isset($coupons[$data['code']])) {
      $coupon = $coupons[$data['code']];
      db_update('uc_coupons_orders')
        ->fields(array(
            'cid' => $coupon->cid,
            'value' => $coupon->amount,
          ))
        ->condition('oid', $order_id)
        ->condition('code', $coupon->code)
        ->execute();
      uc_order_update_line_item($lid, $coupon->title, -$coupon->amount);
    }
    else {
      db_delete('uc_coupons_orders')
        ->condition('oid', $order_id)
        ->condition('code', $data['code'])
        ->execute();
      uc_order_delete_line_item($lid);
    }
    unset($coupons[$data['code']]);
  }
  
  foreach ($coupons as $code => $coupon) {
    $id = db_insert('uc_coupons_orders')
      ->fields(array(
          'cid' => $coupon->cid,
          'oid' => $order_id,
          'code' => $coupon->code,
          'value' => $coupon->amount,
        ))
      ->execute();
    uc_order_line_item_add($order_id, 'coupon', $coupon->title, -$coupon->amount);
  }
}

/**
 * Implements hook_uc_line_item().
 */
function uc_coupon_uc_line_item() {
  $items[] = array(
    'id' => 'coupon',
    'title' => t('Coupon discount'),
    'tax_adjustment' => 'uc_coupon_tax_adjustment',
    'weight' => 100,
    'default' => FALSE,
    'stored' => TRUE,
    'add_list' => TRUE,
    'calculated' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_uc_line_item_alter().
 */
function uc_coupon_uc_line_item_alter(&$item, $order) {
  switch ($item['type']) {
    // Adjust the pre-tax subtotal to exclude the portion of a tax-inclusive coupon that applies to the tax.
    case 'tax_subtotal':
      $item['amount'] += uc_coupon_uc_order('total', $order);
      break;

    // Adjust the total tax so that each tax is applied to coupon on a per-product basis.
    // !TODO - Remove this if patch to uc_taxes from http://drupal.org/node/1155656 is committed.
    case 'tax':
      $tax = uc_taxes_rate_load($item['data']['tax_id']);
      if (is_array($tax->taxed_line_items)
          && in_array('coupon', $tax->taxed_line_items)
          && isset($order->data['coupons'])) {
        $old_value = 0;
        foreach ($order->data['coupons'] as $discounts) {
          foreach ($discounts as $discount) {
            $old_value += $discount->discount;
          }
        }
        $item['amount'] += (uc_coupon_tax_adjustment(-1, $order, $tax) + $old_value) * $tax->rate;
      }
      break;
  }
}

/**
 * Handle tax on coupons by calculating tax for individual discounted prices.
 * This is designed to work with a patch to uc_taxes from http://drupal.org/node/1155656.
 */
function uc_coupon_tax_adjustment($price, $order, $tax) {
  $amount = 0;
  if (isset($order->data['coupons'])) {
    foreach ($order->data['coupons'] as $discounts) {
      foreach ($discounts as $nid => $item) {
        $node = node_load($nid);
        if (in_array($node->type, $tax->taxed_product_types) && ($tax->shippable == 0 || $node->shippable == 1)) {
          $amount += (isset($item->pretax_discount) ? $item->pretax_discount : $item->discount) * ($price > 0 ? 1 : -1);
        }
      }
    }
  }

  return $amount;
}

/**
 * Show a message if PayPal is enabled and "itemized order" is selected.
 */
function _uc_coupon_paypal_check() {
  if (variable_get('uc_payment_method_paypal_wps_checkout', 0) && variable_get('uc_paypal_wps_submit_method', 'single') == 'itemized') {
    drupal_set_message(t('To use coupons with PayPal you must select "Submit the whole order as a single line item". <a href="!url">Click here to change this setting</a>.', array('!url' => url('admin/store/settings/payment/edit/methods'))));
  }
}

/**
 * Implements hook_uc_store_status().
 */
function uc_coupon_uc_store_status() {
  $statuses = array();
  if (variable_get('uc_payment_method_paypal_wps_checkout', 0) && variable_get('uc_paypal_wps_submit_method', 'single') == 'itemized') {
    $statuses[] = array(
      'status' => 'warning',
      'title' => t('Coupons'),
      'desc' => t('To use coupons with PayPal you must select "Submit the whole order as a single line item". <a href="!url">Click here to change this setting</a>.', array('!url' => url('admin/store/settings/payment/edit/methods'))),
    );
  }
  return $statuses;
}


/**
 * Implements hook_uc_cart_alter().
 *
 * If a coupon is in use, add it as a (fake) cart item.
 * This will be converted to a real line item during checkout.
 */
function uc_coupon_uc_cart_alter(&$items, $ignore = NULL) {
  if (variable_get('uc_coupon_show_in_cart', TRUE) && isset($_SESSION['uc_coupons'])) {
    foreach ($_SESSION['uc_coupons'] as $code) {
      $coupon = uc_coupon_validate($code);
      if ($coupon->valid) {
        $items[] = (object) array(
          'cart_item_id' => 0,
          'module' => 'uc_coupon',
          'coupon' => $coupon,
          'title' => $coupon->title,
          'nid' => 0,
          'qty' => 1,
          'price' => -$coupon->amount,
          'data' => array('shippable' => FALSE),
        );
      }
    }
  }
}

/**
 * Implements hook_uc_cart_display().
 */
function uc_coupon_uc_cart_display($item) {
  return array(
    'module' => array('#type' => 'value', '#value' => 'uc_coupon'),
    'nid' => array('#type' => 'value', '#value' => 0),
    'title' => array('#markup' => $item->title),
    'description' => array('#markup' => ''),
    'qty' => array('#type' => 'hidden', '#value' => 0, '#default_value' => 1),
    '#total' => $item->price,
    'data' => array('#type' => 'hidden', '#value' => serialize($item->data)),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 *
 * Remove the coupon cart item, as it will be handled as a line item during checkout.
 * Collapse coupon checkout pane, if configured to do so.
 */
function uc_coupon_form_uc_cart_checkout_form_alter(&$form, $form_state) {
  if (variable_get('uc_coupon_show_in_cart', TRUE) && isset($_SESSION['uc_coupons'])) {
    $items = unserialize($form['cart_contents']['#value']);
    foreach ($items as $key => $item) {
      if ($item->module == 'uc_coupon') {
        unset($items[$key]);
      }
    }
    $form['cart_contents']['#value'] = serialize($items);
    // Make sure the fake uc_coupon cart item doesn't add to the total of the payment
    // preview pane once it has been recorded as a line item.  This is necessary because
    // uc_checkout_pane_cart('view') resets the $order->products field to the cart contents
    // when rebuilding form after an AJAX submission.
    if (isset($form['panes']['payment']['line_items']['#order'])) {
      $order = $form['panes']['payment']['line_items']['#order'];
      foreach ($order->line_items as $line) {
        if ($line['type'] == 'coupon') {
          $form['panes']['payment']['line_items']['#order']->products = $items;
        }
      }
    }
  }

  if (variable_get('uc_coupon_collapse_pane', FALSE) && isset($form['panes']['coupon'])) {
    $form['panes']['coupon']['#collapsed'] = TRUE;
  }
}

/**
 * Implements hook_uc_checkout_complete().
 *
 * Ensure the stored coupon code is reset after checkout.
 */
function uc_coupon_uc_checkout_complete($order, $account) {
  unset($_SESSION['uc_coupons']);
}

/**
 * Preprocess template for a printed coupon certificate.
 * @see uc_coupon-certificate.tpl.php
 */
function template_preprocess_uc_coupon_certificate(&$variables) {
  $coupon = $variables['coupon'];

  $variables['value'] = theme('uc_coupon_discount', array('coupon' => $coupon));

  $variables['display_name'] = check_plain($coupon->name);
  $n = stripos($variables['display_name'], 'purchased by');
  if ($n) {
    $variables['display_name'] = substr($variables['display_name'], 0, $n -1);
  }

  if ($coupon->valid_until) {
    $variables['not_yet_valid'] = $coupon->valid_from > REQUEST_TIME;
    $variables['valid_from'] = format_date($coupon->valid_from, 'custom', variable_get('uc_date_format_default', 'm/d/Y'));
    $variables['valid_until'] = format_date($coupon->valid_until, 'custom', variable_get('uc_date_format_default', 'm/d/Y'));
  }
  else {
    $variables['not_yet_valid'] = FALSE;
    $variables['valid_from'] = FALSE;
    $variables['valid_until'] = FALSE;
  }

  $variables['max_uses_per_user'] = isset($coupon->data['max_uses_per_user']) ? $coupon->data['max_uses_per_user'] : NULL;

  $variables['include'] = array();
  $variables['exclude'] = array();

  if (isset($coupon->data['product_types'])) {
    foreach ($coupon->data['product_types'] as $type) {
      $variables['include'][] = node_type_get_name($type);
    }
  }

  if (isset($coupon->data['products'])) {
    $key = isset($coupon->data['negate_products']) ? 'exclude' : 'include';
    foreach ($coupon->data['products'] as $nid) {
      $node = node_load($nid);
      $variables[$key][] = $node->title;
    }
  }

  if (isset($coupon->data['skus'])) {
    foreach ($coupon->data['skus'] as $sku) {
      $variables['include'][] = t('SKU') . ' ' . $sku;
    }
  }

  if (isset($coupon->data['terms'])) {
    $key = isset($coupon->data['negate_terms']) ? 'exclude' : 'include';
    foreach ($coupon->data['terms'] as $tid) {
      $term = taxonomy_term_load($tid);
      $variables[$key][] = $term->name;
    }
  }

  // Merge in global tokens.
  $info = token_get_info();
  foreach ($info['types'] as $type => $type_info) {
    if (empty($type_info['needs-data'])) {
      foreach (array_keys($info['tokens'][$type]) as $token) {
        $variables[str_replace('-', '_', $type) . '_' . str_replace('-', '_', $token)] = token_replace("[$type:$token]");  
      }
    }
  }

  if (isset($variables['coupon']->data['base_cid'])) {
    $variables['template_files'][] = 'uc_coupon-certificate-base-' . $variables['coupon']->data['base_cid'];
  }
  $variables['template_files'][] = 'uc_coupon-certificate-' . $variables['coupon']->cid;
}

/**
 * Page template for printed coupons.
 * @see uc_coupon-page.tpl.php
 */
function template_preprocess_uc_coupon_page(&$variables) {
  $variables['styles'] = drupal_get_css();
}

/**
 * Implements hook_uc_coupon_actions().
 */
function uc_coupon_uc_coupon_actions($coupon) {
  $actions = array();

  if (user_access('view store coupons')) {
    $actions[] = array(
      'url' => 'admin/store/coupons/' . $coupon->cid,
      'icon' => drupal_get_path('module', 'uc_store') . '/images/order_view.gif',
      'title' => t('View coupon: @name', array('@name' => $coupon->name)),
    );

    $actions[] = array(
      'url' => 'admin/store/coupons/' . $coupon->cid . '/print',
      'icon' => drupal_get_path('module', 'uc_store') . '/images/print.gif',
      'title' => t('Print coupon: @name', array('@name' => $coupon->name)),
    );

    if ($coupon->bulk) {
      $actions[] = array(
        'url' => 'admin/store/coupons/' . $coupon->cid . '/codes',
        'icon' => drupal_get_path('module', 'uc_store') . '/images/menu_reports_small.gif',
        'title' => t('Download codes as CSV: @name', array('@name' => $coupon->name)),
      );
    }
  }

  if (user_access('manage store coupons')) {
    $actions[] = array(
      'url' => 'admin/store/coupons/' . $coupon->cid . '/edit',
      'icon' => drupal_get_path('module', 'uc_store') . '/images/order_edit.gif',
      'title' => t('Edit coupon: @name', array('@name' => $coupon->name)),
    );

    $actions[] = array(
      'url' => 'admin/store/coupons/' . $coupon->cid . '/delete',
      'icon' => drupal_get_path('module', 'uc_store') . '/images/order_delete.gif',
      'title' => t('Delete coupon: @name', array('@name' => $coupon->name)),
    );
  }

  return $actions;
}

/**
 * Implements hook_views_api().
 */
function uc_coupon_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_coupon') . '/views',
  );
}
