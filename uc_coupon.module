<?php
// $Id$

require_once 'uc_coupon.ca.inc';

/**
 * @file
 * Provides discount coupons for Ubercart.
 *
 * Original code by Blake Lucchesi (www.boldsource.com)
 * Maintained by David Long (dave@longwaveconsulting.com)
 *
 * Send any suggestions and feedback to the above address.
 */

/**
 * Implementation of hook_menu().
 */
function uc_coupon_menu() {
  $items = array();

  $items['admin/store/coupons'] = array(
    'title' => 'Coupons',
    'description' => 'Manage store discount coupons.',
    'page callback' => 'uc_coupon_display',
    'page arguments' => array('active'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['admin/store/coupons/list'] = array(
    'title' => 'Active coupons',
    'description' => 'View active coupons.',
    'page callback' => 'uc_coupon_display',
    'page arguments' => array('active'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 0,
  );
  $items['admin/store/coupons/inactive'] = array(
    'title' => 'Inactive coupons',
    'description' => 'View inactive coupons.',
    'page callback' => 'uc_coupon_display',
    'page arguments' => array('inactive'),
    'access arguments' => array('view store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 1,
  );
  $items['admin/store/coupons/add'] = array(
    'title' => 'Add new coupon',
    'description' => 'Add a new coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_add_form'),
    'access arguments' => array('manage store coupons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 2,
  );
  $items['admin/store/coupons/%uc_coupon'] = array(
    'title callback' => 'uc_coupon_title',
    'title arguments' => array(3),
    'description' => 'View coupon details.',
    'page callback' => 'uc_coupon_view',
    'page arguments' => array(3),
    'access arguments' => array('view store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 3,
  );
  $items['admin/store/coupons/%uc_coupon/view'] = array(
    'title' => 'View',
    'description' => 'View coupon details.',
    'access arguments' => array('view store coupons'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 0,
  );
  $items['admin/store/coupons/%uc_coupon/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit an existing coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_add_form', 3),
    'access arguments' => array('manage store coupons'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 1,
  );
  $items['admin/store/coupons/%uc_coupon/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_coupon_delete_confirm', 3),
    'access arguments' => array('manage store coupons'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_coupon.admin.inc',
    'weight' => 2,
  );
  $items['admin/store/coupons/%uc_coupon/codes'] = array(
    'title' => 'Download bulk coupon codes',
    'description' => 'Download the list of bulk coupon codes as a CSV file.',
    'page callback' => 'uc_coupon_codes_csv',
    'page arguments' => array(3),
    'access arguments' => array('view store coupons'),
    'file' => 'uc_coupon.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/store/reports/coupon'] = array(
    'title' => 'Coupon usage reports',
    'description' => 'View coupon usage reports.',
    'page callback' => 'uc_coupon_reports',
    'access arguments' => array('view reports'),
    'file' => 'uc_coupon.reports.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['cart/checkout/coupon'] = array(
    'title' => 'Apply coupon',
    'page callback' => 'uc_coupon_checkout_apply',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['uc_coupon/autocomplete/node'] = array(
    'title' => 'Node autocomplete',
    'page callback' => 'uc_coupon_autocomplete_node',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['uc_coupon/autocomplete/term'] = array(
    'title' => 'Term autocomplete',
    'page callback' => 'uc_coupon_autocomplete_term',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['uc_coupon/autocomplete/user'] = array(
    'title' => 'User autocomplete',
    'page callback' => 'uc_coupon_autocomplete_user',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );
  $items['uc_coupon/autocomplete/role'] = array(
    'title' => 'Role autocomplete',
    'page callback' => 'uc_coupon_autocomplete_role',
    'access arguments' => array('manage store coupons'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coupon.admin.inc',
  );

  return $items;
}

function uc_coupon_title($coupon) {
  return $coupon->name;
}

/**
 * Implementation of hook_perm().
 */
function uc_coupon_perm() {
  $perms = array('view store coupons', 'manage store coupons', 'coupon wholesale pricing');
  if (!module_exists('uc_reports')) {
    $perms[] = 'view reports';
  }
  return $perms;
}

/**
 * Implementation of hook_init().
 */
function uc_coupon_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_coupon_pane_description';
}

/**
 * Return the actions a user may perform on a coupon.
 */
function uc_coupon_actions($coupon) {
  $actions = array();

  if (user_access('view store coupons')) {
    $alt = t('View coupon: @name', array('@name' => $coupon->name));
    $actions[] = array(
      'url' => 'admin/store/coupons/'. $coupon->cid,
      'icon' => '<img src="'. base_path() . drupal_get_path('module', 'uc_store') .'/images/order_view.gif" alt="'. $alt .'" />',
      'title' => $alt,
    );
  }

  if (user_access('view store coupons') && $coupon->bulk) {
    $alt = t('Download codes as CSV: @name', array('@name' => $coupon->name));
    $actions[] = array(
      'url' => 'admin/store/coupons/'. $coupon->cid .'/codes',
      'icon' => '<img src="'. base_path() . drupal_get_path('module', 'uc_store') .'/images/menu_reports_small.gif" alt="'. $alt .'" />',
      'title' => $alt,
    );
  }

  if (user_access('manage store coupons')) {
    $alt = t('Edit coupon: @name', array('@name' => $coupon->name));
    $actions[] = array(
      'url' => 'admin/store/coupons/'. $coupon->cid .'/edit',
      'icon' => '<img src="'. base_path() . drupal_get_path('module', 'uc_store') .'/images/order_edit.gif" alt="'. $alt .'" />',
      'title' => $alt,
    );
  }

  if (user_access('manage store coupons')) {
    $alt = t('Delete coupon: @name', array('@name' => $coupon->name));
    $actions[] = array(
      'url' => 'admin/store/coupons/'. $coupon->cid .'/delete',
      'icon' => '<img src="'. base_path() . drupal_get_path('module', 'uc_store') .'/images/order_delete.gif" alt="'. $alt .'" />',
      'title' => $alt,
    );
  }

  foreach ($actions as &$action) {
    $action = l($action['icon'], $action['url'], array('attributes' => array('title' => $action['title']), 'html' => TRUE));
  }
  return implode(' ', $actions);
}

/**
 * Save a coupon object.
 * 
 * If the 'cid' field is set, then this will update an existing coupon.
 * Otherwise, a new bulk seed will be generated, the coupon will be
 * inserted into the database, and $coupon->cid will be set.
 * 
 * @param $coupon
 *   The coupon to save.
 * 
 * @param $edit
 *   An optional array of extra data that other modules may need to save.
 */
function uc_coupon_save(&$coupon, $edit = array()) {
  foreach (module_implements('uc_coupon_presave') as $module) {
    $callback = $module . '_uc_coupon_presave';
    $callback($coupon, $edit);
  }

  if (isset($coupon->cid)) {
    drupal_write_record('uc_coupons', $coupon, 'cid');
  }
  else {
    $coupon->created = time();
    $coupon->bulk_seed = md5(uniqid());
    drupal_write_record('uc_coupons', $coupon);
  }
}

/**
 * Load a coupon object.
 *
 * @param $cid
 *   Unique coupon ID.
 *
 * @return $coupon
 *   A coupon object.
 */
function uc_coupon_load($cid) {
  $coupon = db_fetch_object(db_query("SELECT * FROM {uc_coupons} WHERE cid = %d", $cid));
  if ($coupon->data) {
    $coupon->data = unserialize($coupon->data);
  }
  return $coupon;
}

/**
 * Generate a single bulk coupon code.
 */
function uc_coupon_get_bulk_code($coupon, $id) {
  $id = str_pad(dechex($id), strlen(dechex($coupon->data['bulk_number'])), '0', STR_PAD_LEFT);
  $length = strlen($coupon->code) + $coupon->data['bulk_length'];
  return strtoupper(substr($coupon->code . $id . md5($coupon->bulk_seed . $id), 0, $length));
}

/**
 * Load a coupon (single or bulk) from the supplied code.
 */
function uc_coupon_find($code) {
  // Look for matching single coupon first.
  $coupon = db_fetch_object(db_query("SELECT * FROM {uc_coupons} WHERE code = '%s' AND status = 1 AND bulk = 0 AND valid_from < %d AND valid_until > %d", $code, time(), time()));
  if ($coupon !== FALSE) {
    if ($coupon->data) {
      $coupon->data = unserialize($coupon->data);
    }
    return $coupon;
  }

  // Look through bulk coupons.
  $result = db_query("SELECT * FROM {uc_coupons} WHERE status = 1 AND bulk = 1 AND valid_from < %d AND valid_until > %d", time(), time());
  while ($coupon = db_fetch_object($result)) {
    // Check coupon prefix.
    $prefix_length = strlen($coupon->code);
    if (substr($code, 0, $prefix_length) != $coupon->code) {
      continue;
    }

    if ($coupon->data) {
      $coupon->data = unserialize($coupon->data);
    }

    // Check coupon sequence ID.
    $id = substr($code, $prefix_length, strlen(dechex($coupon->data['bulk_number'])));
    if (!preg_match("/^[0-9A-F]+$/", $id)) {
      continue;
    }
    $id = hexdec($id);
    if ($id < 0 || $id > $coupon->data['bulk_number']) {
      continue;
    }

    // Check complete coupon code.
    if ($code == uc_coupon_get_bulk_code($coupon, $id)) {
      return $coupon;
    }
  }

  return FALSE;
}

/**
 * Validate a coupon and calculate the coupon amount against the current cart contents.
 *
 * @param $code
 *  The coupon code entered at the checkout screen
 *
 * @return
 *  Returns a coupon result object with details about the validation
 */
function uc_coupon_validate($code) {
  global $user;

  $result->valid = FALSE;

  $code = trim(strtoupper($code));
  $coupon = uc_coupon_find($code);

  if (!$coupon) {
    $result->message = t('This coupon code is invalid or has expired.');
    return $result;
  }

  if (isset($coupon->data['products']) || isset($coupon->data['skus']) || isset($coupon->data['terms']) || isset($coupon->data['product_types'])) {
    $prices = array();

    // Product coupons apply to the subtotal and quantity of matching products.
    foreach (uc_cart_get_contents() as $item) {
      $cart_total += $item->price * $item->qty;

      $terms = array();
      $query = db_query("SELECT tid FROM {term_node} WHERE vid = %d", $item->vid);
      while ($tid = db_result($query)) {
        $terms[] = $tid;
      }

      if (isset($coupon->data['products']) && (isset($coupon->data['negate_products']) xor in_array($item->nid, $coupon->data['products']))) {
        $prices = array_pad($prices, count($prices) + $item->qty, $item->price);
      }
      else if (isset($coupon->data['products']) && isset($coupon->data['negate_products']) && in_array($item->nid, $coupon->data['products'])) {
        ;// always exclude if in list of negated products
      }
      else if (isset($coupon->data['skus']) && in_array($item->model, $coupon->data['skus'])) {
        $prices = array_pad($prices, count($prices) + $item->qty, $item->price);
      }
      else if (isset($coupon->data['terms']) && (isset($coupon->data['negate_terms']) xor count(array_intersect($terms, $coupon->data['terms'])))) {
        $prices = array_pad($prices, count($prices) + $item->qty, $item->price);
      }
      else if (isset($coupon->data['terms']) && isset($coupon->data['negate_terms']) && count(array_intersect($terms, $coupon->data['terms']))) {
        ;// always exclude if one of the terms is in the list of negated terms
      }
      else if (isset($coupon->data['product_types'])) {
        $type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $item->nid));
        if (in_array($type, $coupon->data['product_types'])) {
          $prices = array_pad($prices, count($prices) + $item->qty, $item->price);
        }
      }
    }

    // If a maximum number of applicable products has been specified...
    if (isset($coupon->data['max_applicable_products']) && ($num = $coupon->data['max_applicable_products']) > 0) {
      // Sort the array of applicable product prices.
      sort($prices);

      // Slice the appropriate number of prices off the array.
      if ($coupon->data['max_applicable_products_value'] == 'cheapest') {
        $applicable_prices = array_slice($prices, 0, $num);
      }
      else {
        $applicable_prices = array_slice($prices, -$num);
      }

      // Set the applicable total and quantity based on our new prices.
      $applicable_total = 0;
      foreach ($applicable_prices as $price) {
        $applicable_total += $price;
      }
      $applicable_qty = $num;
    }
    else {
      // Otherwise include all the prices in the applicable totals.
      $applicable_total = 0;
      foreach ($prices as $price) {
        $applicable_total += $price;
      }
      $applicable_qty = count($prices);
    }
  }
  else {
    // Standard coupons apply once to the whole cart.
    foreach (uc_cart_get_contents() as $item) {
      $cart_total += $item->price * $item->qty;
    }
    $applicable_total = $cart_total;
    $applicable_qty = 1;
  }

  if ($applicable_total == 0) {
    $result->message = t('You do not have applicable products in your cart.');
    return $result;
  }

  //  CHECK MAX USES
  if ($coupon->max_uses > 0) {
    $used = db_result(db_query("SELECT COUNT(*) FROM {uc_coupons_orders} AS uco LEFT JOIN {uc_orders} AS uo ON uco.oid = uo.order_id LEFT JOIN {uc_order_statuses} AS uos ON uo.order_status = uos.order_status_id WHERE uos.weight > 0 AND uco.cid = %d AND uco.code = '%s'", $coupon->cid, $code));
    if ($used >= $coupon->max_uses) {
      $result->message = t('This coupon has reached the maximum redemption limit.');
      return $result;
    }
  }

  //  CHECK MAX USES PER USER
  if (isset($coupon->data['max_uses_per_user'])) {
    $used = db_result(db_query("SELECT COUNT(*) FROM {uc_coupons_orders} AS uco LEFT JOIN {uc_orders} AS uo ON uco.oid = uo.order_id LEFT JOIN {uc_order_statuses} AS uos ON uo.order_status = uos.order_status_id WHERE uos.weight > 0 AND uco.cid = %d AND uo.uid = %d", $coupon->cid, $user->uid));
    if ($used >= $coupon->data['max_uses_per_user']) {
      $result->message = t('This coupon has reached the maximum redemption limit.');
      return $result;
    }
  }

  //  CHECK MINIMUM PURCHASE VALUE
  if ($coupon->minimum_order > 0 && $coupon->minimum_order > $cart_total) {
    $result->message = t('You have not reached the minimum order total for this coupon.');
    return $result;
  }

  //  CHECK USER ID
  if (isset($coupon->data['users'])) {
    if (!in_array("$user->uid", $coupon->data['users'], TRUE)) {
      $result->message = t('Your user ID is not allowed to use this coupon.');
      return $result;
    }
  }

  // CHECK ROLES
  if (isset($coupon->data['roles'])) {
    $role_found = FALSE;
    foreach ($coupon->data['roles'] as $role) {
      if (in_array($role, $user->roles)) {
        $role_found = TRUE;
        break;
      }
    }
    if (!$role_found) {
      $result->message = t('You do not have the correct permission to use this coupon.');
      return $result;
    }
  }

  // CHECK USER PERMISSIONS
  // 1 - both wholesale and retail any user
  // 2 - wholesale only -> users with 'coupon wholesale pricing'
  // 3 - retail only -> users without 'coupon wholesale pricing'
  if ($coupon->data['wholesale'] > 1) {
    if ($coupon->data['wholesale'] == 2) {
      if (!user_access('coupon wholesale pricing')) {
        $result->message = t('You do not have the correct permission to use this coupon.');
        return $result;
      }
    }
    else if ($coupon->data['wholesale'] == 3) {
      if (user_access('coupon wholesale pricing')) {
        $result->message = t('You do not have the correct permission to use this coupon.');
        return $result;
      }
    }
  }

  $result->valid = TRUE;
  $result->code = $code;
  $result->cid = $coupon->cid;
  $result->title = t('Coupon: @code', array('@code' => $code));

  if ($coupon->type == 'percentage') {
    $result->amount = round($applicable_total * $coupon->value / 100, variable_get('uc_currency_prec', 2));
  }
  else if ($coupon->type == 'price') {
    $result->amount = min($applicable_total, $applicable_qty * $coupon->value);
  }

  return $result;
}

/**
 * Implementation of hook_block().
 */
function uc_coupon_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks[0] = array(
        'info' => t('Coupon discount form'),
      );
      return $blocks;

    case 'view':
      if ($delta == 0) {
        $block = array(
          'subject' => t('Coupon discount'),
          'content' => drupal_get_form('uc_coupon_block_form'),
        );
        return $block;
      }
      break;
  }
}

/**
 * Implementation of hook_cart_pane().
 */
function uc_coupon_cart_pane($items) {
  $panes[] = array(
    'id' => 'coupon',
    'body' => drupal_get_form('uc_coupon_block_form', 25),
    'title' => t('Coupon discount'),
    'desc' => t('Allows shoppers to use a coupon during checkout for order discounts.'),
    'weight' => 1,
    'enabled' => TRUE,
  );
  return $panes;
}

/**
 * Coupon block form, also available as a cart pane.
 */
function uc_coupon_block_form($form_state, $size = 15) {
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#default_value' => $_SESSION['uc_coupon'],
    '#size' => $size,
  );
  $form['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
  );
  return $form;
}

function uc_coupon_block_form_submit($form, &$form_state) {
  if ($form_state['values']['code']) {
    $code = $form_state['values']['code'];
    $coupon = uc_coupon_validate($code);
    if (!$coupon->valid) {
      unset($_SESSION['uc_coupon']);
      drupal_set_message($coupon->message, 'error');
    }
    else {
      $_SESSION['uc_coupon'] = $code;
      drupal_set_message(t('A discount of !amount has been applied to your cart.', array('!amount' => uc_currency_format($coupon->amount))));
    }
  }
}

/**
 * Implementation of hook_order().
 *
 * Ensure any cart pane coupon is added to the order if the checkout page is skipped
 * (e.g. Paypal Express Checkout, Google Checkout)
 */
function uc_coupon_order($op, &$arg1, $arg2) {
  if ($op == 'save' && isset($_SESSION['uc_coupon'])) {
    $coupon = uc_coupon_validate($_SESSION['uc_coupon']);
    if ($coupon->valid) {
      _uc_coupon_apply_to_order($arg1->order_id, $coupon);
    }
    unset($_SESSION['uc_coupon']);
  }
}

/**
 * Implementation of hook_checkout_pane().
 *
 * Show a pane just above the order total that allows shoppers to enter a coupon
 * for a discount.
 */
function uc_coupon_checkout_pane() {
  $panes[] = array(
    'id' => 'coupon',
    'callback' => 'uc_checkout_pane_coupon',
    'title' => t('Coupon discount'),
    'desc' => t('Allows shoppers to use a coupon during checkout for order discounts.'),
    'weight' => 5,
    'process' => TRUE,
  );
  return $panes;
}

/**
 * Checkout Pane callback function.
 *
 * Used to display a form in the checkout process so that customers
 * can enter discount coupons.
 */
function uc_checkout_pane_coupon($op, &$arg1, $arg2) {
  switch ($op) {
    case 'view':
      drupal_add_js(drupal_get_path('module', 'uc_coupon') .'/uc_coupon.js');
      drupal_add_js(array(
        'ucURL' => array(
          'applyCoupon' => url('cart/checkout/coupon'),
        ),
      ), 'setting');

      if (isset($_SESSION['uc_coupon'])) {
        $code = $_SESSION['uc_coupon'];
      }
      else if (isset($arg1->data['coupon'])) {
        $code = $_SESSION['uc_coupon'] = $arg1->data['coupon'];
      }
      else {
        $code = '';
      }

      if ($code) {
        $coupon = uc_coupon_validate($code);
        if ($coupon->valid) {
          drupal_add_js('$(document).ready(function() {
            if (window.set_line_item) {
              li_values["subtotal"] += ' . $coupon->amount . ';
              set_line_item("coupon", "'. $coupon->title .'", '. -$coupon->amount .', 2);
            }
          });', 'inline');
        }
      }

      $description = variable_get('uc_coupon_pane_description', t('Enter a coupon code for this order.'));
      $contents['code'] = array(
        '#type' => 'textfield',
        '#title' => t('Coupon code'),
        '#default_value' => $code,
        '#size' => 25,
      );
      $contents['apply'] = array(
        '#type' => 'button',
        '#value' => t('Apply to order'),
        '#attributes' => array('onclick' => "getCoupon(); return false;"),
      );
      return array('description' => $description, 'contents' => $contents);

    case 'process':
      if ($arg2['code']) {
        $arg1->data['coupon'] = $arg2['code'];
        $coupon = uc_coupon_validate($arg1->data['coupon']);
        if (!$coupon->valid) {
          drupal_set_message($coupon->message, 'error');
          return FALSE;
        }
        $_SESSION['uc_coupon'] = $arg1->data['coupon'];
        _uc_coupon_apply_to_order($arg1->order_id, $coupon);
      }
      return TRUE;

    case 'settings':
      $form['uc_coupon_pane_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Checkout pane message'),
        '#default_value' => variable_get('uc_coupon_pane_description', t('Enter a coupon code for this order.')),
      );
      return $form;
  }
}

/**
 * Checkout pane AJAX callback.
 **/
function uc_coupon_checkout_apply() {
  $coupon = uc_coupon_validate($_POST['code']);
  if ($coupon->valid) {
    $coupon->message = t('The coupon has been applied to your order.');
    $_SESSION['uc_coupon'] = $_POST['code'];
  }
  else {
    unset($_SESSION['uc_coupon']);
  }

  drupal_set_header("Content-Type: text/javascript; charset=utf-8");
  print drupal_to_js($coupon);
  exit();
}

/**
 * Create or update the coupon line item in an order.
 */
function _uc_coupon_apply_to_order($order_id, $coupon) {
  $lid = db_result(db_query("SELECT line_item_id FROM {uc_order_line_items} WHERE order_id = %d AND type = 'coupon'", $order_id));
  if ($lid) {
    db_query("UPDATE {uc_coupons_orders} SET cid = %d, code = '%s', value = %f WHERE oid = %d", $coupon->cid, $coupon->code, $coupon->amount, $order_id);
    uc_order_update_line_item($lid, $coupon->title, -$coupon->amount);
  }
  else {
    db_query("INSERT INTO {uc_coupons_orders} (cid, oid, code, value) VALUES (%d, %d, '%s', %f)", $coupon->cid, $order_id, $coupon->code, $coupon->amount);
    uc_order_line_item_add($order_id, 'coupon', $coupon->title, -$coupon->amount);
  }
}

/**
 * Implementation of hook_line_item().
 */
function uc_coupon_line_item() {
  $items[] = array(
    'id' => 'coupon',
    'title' => t('Coupon discount'),
    'weight' => 2,
    'default' => FALSE,
    'stored' => TRUE,
    'add_list' => TRUE,
    'calculated' => TRUE,
  );
  return $items;
}

/**
 * Show a message if PayPal is enabled and "itemized order" is selected.
 */
function _uc_coupon_paypal_check() {
  if (variable_get('uc_payment_method_paypal_wps_checkout', 0) && variable_get('uc_paypal_wps_submit_method', 'single') == 'itemized') {
    drupal_set_message(t('To use coupons with PayPal you must select "Submit the whole order as a single line item". <a href="!url">Click here to change this setting</a>.', array('!url' => url('admin/store/settings/payment/edit/methods'))));
  }
}

/**
 * Implementation of hook_store_status().
 */
function uc_coupon_store_status() {
  if (variable_get('uc_payment_method_paypal_wps_checkout', 0) && variable_get('uc_paypal_wps_submit_method', 'single') == 'itemized') {
    $statuses[] = array(
      'status' => 'warning',
      'title' => t('Coupons'),
      'desc' => t('To use coupons with PayPal you must select "Submit the whole order as a single line item". <a href="!url">Click here to change this setting</a>.', array('!url' => url('admin/store/settings/payment/edit/methods'))),
    );
  }
  return $statuses;
}

/**
 * Implementation of hook_token_list().
 */
function uc_coupon_token_list($type = 'all') {
  $tokens = array();

  if ($type == 'coupon' || $type == 'ubercart' || $type == 'all') {
    $tokens['coupon']['coupon-name'] = t('The coupon name.');
    $tokens['coupon']['coupon-code'] = t('The coupon code.');
    $tokens['coupon']['coupon-bulk-codes'] = t('The list of bulk coupon codes, if the coupon is a bulk coupon.');
  }

  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function uc_coupon_token_values($type, $object = NULL) {
  $values = array();
 
  switch ($type) {
    case 'coupon':
      $values['coupon-name'] = $object->name;
      $values['coupon-code'] = $object->code;
      if ($object->bulk) {
        $codes = array();
        for ($id = 0; $id < $object->data['bulk_number']; $id++) {
          $codes[] = uc_coupon_get_bulk_code($object, $id);
        }
        $values['coupon-bulk-codes'] .= implode("<br />", $codes);
      }
      break;
  }

  return $values;
}

/**
 * Implementation of hook_uc_cart_alter().
 *
 * If a coupon is in use, add it as a cart item.
 */
function uc_coupon_uc_cart_alter(&$items, $ignore = NULL) {
  if (isset($_SESSION['uc_coupon'])) {
    $coupon = uc_coupon_validate($_SESSION['uc_coupon']);
    if ($coupon->valid) {
      $items[] = (object) array(
        'module' => 'uc_coupon',
        'coupon' => $coupon,
        'title' => $coupon->title,
        'qty' => 1,
        'price' => -$coupon->amount,
      );
    }
  }
}

/**
 * Implementation of hook_cart_display().
 */
function uc_coupon_cart_display($item) {
  return array(
    'title' => array('#value' => $item->title),
    '#total' => $item->price,
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 *
 * Remove the coupon cart item, as it will be handled as a line item during checkout.
 */
function uc_coupon_form_uc_cart_checkout_form_alter(&$form, $form_state) {
  if (isset($_SESSION['uc_coupon'])) {
    $items = unserialize($form['cart_contents']['#value']);
    foreach ($items as $key => $item) {
      if ($item->module == 'uc_coupon') {
        unset($items[$key]);
      }
    }
    $form['cart_contents']['#value'] = serialize($items);
  }
}

/**
 * Implementation of hook_checkout_complete().
 *
 * Ensure the stored coupon code is reset after checkout.
 */
function uc_coupon_uc_checkout_complete($order, $account) {
  unset($_SESSION['uc_coupon']);
}
