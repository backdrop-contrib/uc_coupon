<?php

/**
 * @file
 * Ubercart uc_coupon.module schema
 */

/**
 * Implements hook_schema().
 */
function uc_coupon_schema() {
  $schema = array();

  $schema['uc_coupons'] = array(
    'description' => 'Ubercart Coupons',
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The coupon name',
      ),
      'code' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The coupon code (or base code for bulk coupons)',
      ),
      'value' => array(
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The value of the coupon as currency or percent',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '12',
        'not null' => TRUE,
        'default' => 'price',
        'description' => 'The type of the coupon (price, percent, set_price or store credit)',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Whether or not the coupon is active',
      ),
      'valid_from' => array(
        'type' => 'int',
        'description' => 'The date from which the coupon is valid',
      ),
      'valid_until' => array(
        'type' => 'int',
        'description' => 'The date until which the coupon is valid',
      ),
      'max_uses' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The maximum number of uses allowed for this coupon',
      ),
      'minimum_order' => array(
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The minimum order value to which this coupon will apply',
      ),
      'data' => array(
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'bulk' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not this is a bulk coupon',
      ),
      'bulk_seed' => array(
        'type' => 'char',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The unique seed used to genrerate bulk coupon codes',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The date when this coupon was created',
      ),
    ),
    'primary key' => array('cid'),
  );

  $schema['uc_coupons_orders'] = array(
    'description' => 'Ubercart Coupons used on Orders',
    'fields' => array(
      'cuid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'oid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'value' => array(
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
      ),
      'code' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('cuid'),
  );
  return $schema;
}

/**
 * Convert variables to config.
 */
function uc_coupon_update_1000() {
  $config = config('uc_coupon.settings');
  $config->set('uc_coupon_line_item_format', update_variable_get('uc_coupon_line_item_format', 'Coupon [uc_coupon:code]'));
  $config->set('uc_coupon_show_in_cart', update_variable_get('uc_coupon_show_in_cart', 1));
  $config->set('uc_li_coupon_weight', update_variable_get('uc_li_coupon_weight', 0));
  $config->set('uc_coupon_form_components', update_variable_get('uc_coupon_form_components', array('entry' => 'entry')));
  $config->set('uc_coupon_allow_multiple', update_variable_get('uc_coupon_allow_multiple', 0));
  $config->set('uc_coupon_default_usage', update_variable_get('uc_coupon_default_usage', 'single'));
  $config->set('uc_coupon_used_order_status', update_variable_get('uc_coupon_used_order_status', 'processing'));
  $config->set('uc_coupon_querystring', update_variable_get('uc_coupon_querystring', ''));
  $config->set('uc_coupon_expiry_hour', update_variable_get('uc_coupon_expiry_hour', 0));
  $config->set('uc_coupon_expiry_timezone', update_variable_get('uc_coupon_expiry_timezone', 0));
  $config->set('uc_coupon_collapse_pane', update_variable_get('uc_coupon_collapse_pane', FALSE));
  $config->set('uc_coupon_pane_description', update_variable_get('uc_coupon_pane_description', 'Enter a coupon code for this order.'));

  $config->save();

  update_variable_del('uc_coupon_line_item_format');
  update_variable_del('uc_coupon_show_in_cart');
  update_variable_del('uc_li_coupon_weight');
  update_variable_del('uc_coupon_form_components');
  update_variable_del('uc_coupon_allow_multiple');
  update_variable_del('uc_coupon_default_usage');
  update_variable_del('uc_coupon_used_order_status');
  update_variable_del('uc_coupon_querystring');
  update_variable_del('uc_coupon_expiry_hour');
  update_variable_del('uc_coupon_expiry_timezone');
  update_variable_del('uc_coupon_collapse_pane');
  update_variable_del('uc_coupon_pane_description');
}
